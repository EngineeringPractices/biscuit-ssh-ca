// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HallowGCPClient is the client API for HallowGCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HallowGCPClient interface {
	NewCertificate(ctx context.Context, in *NewCertificateRequest, opts ...grpc.CallOption) (*NewCertificateResponse, error)
	CAPublicKey(ctx context.Context, in *CAPublicKeyRequest, opts ...grpc.CallOption) (*CAPublicKeyResponse, error)
}

type hallowGCPClient struct {
	cc grpc.ClientConnInterface
}

func NewHallowGCPClient(cc grpc.ClientConnInterface) HallowGCPClient {
	return &hallowGCPClient{cc}
}

func (c *hallowGCPClient) NewCertificate(ctx context.Context, in *NewCertificateRequest, opts ...grpc.CallOption) (*NewCertificateResponse, error) {
	out := new(NewCertificateResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.HallowGCP/NewCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallowGCPClient) CAPublicKey(ctx context.Context, in *CAPublicKeyRequest, opts ...grpc.CallOption) (*CAPublicKeyResponse, error) {
	out := new(CAPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/flynn.api.v1.HallowGCP/CAPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallowGCPServer is the server API for HallowGCP service.
// All implementations must embed UnimplementedHallowGCPServer
// for forward compatibility
type HallowGCPServer interface {
	NewCertificate(context.Context, *NewCertificateRequest) (*NewCertificateResponse, error)
	CAPublicKey(context.Context, *CAPublicKeyRequest) (*CAPublicKeyResponse, error)
	mustEmbedUnimplementedHallowGCPServer()
}

// UnimplementedHallowGCPServer must be embedded to have forward compatible implementations.
type UnimplementedHallowGCPServer struct {
}

func (UnimplementedHallowGCPServer) NewCertificate(context.Context, *NewCertificateRequest) (*NewCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCertificate not implemented")
}
func (UnimplementedHallowGCPServer) CAPublicKey(context.Context, *CAPublicKeyRequest) (*CAPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CAPublicKey not implemented")
}
func (UnimplementedHallowGCPServer) mustEmbedUnimplementedHallowGCPServer() {}

// UnsafeHallowGCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HallowGCPServer will
// result in compilation errors.
type UnsafeHallowGCPServer interface {
	mustEmbedUnimplementedHallowGCPServer()
}

func RegisterHallowGCPServer(s grpc.ServiceRegistrar, srv HallowGCPServer) {
	s.RegisterService(&_HallowGCP_serviceDesc, srv)
}

func _HallowGCP_NewCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallowGCPServer).NewCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.HallowGCP/NewCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallowGCPServer).NewCertificate(ctx, req.(*NewCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallowGCP_CAPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CAPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallowGCPServer).CAPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flynn.api.v1.HallowGCP/CAPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallowGCPServer).CAPublicKey(ctx, req.(*CAPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HallowGCP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flynn.api.v1.HallowGCP",
	HandlerType: (*HallowGCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCertificate",
			Handler:    _HallowGCP_NewCertificate_Handler,
		},
		{
			MethodName: "CAPublicKey",
			Handler:    _HallowGCP_CAPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
